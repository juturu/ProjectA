//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace FlickrPhotos
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[42];
            _typeNameTable[0] = "FlickrPhotos.ViewModel.ViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "FlickrPhotos.ViewModel.FlickrAuthentication";
            _typeNameTable[3] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[4] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[5] = "FlickrPhotos.ViewModel.FlickrPhotosViewModel";
            _typeNameTable[6] = "FlickrPhotos.ViewModel.FlickrAlbumsViewModel";
            _typeNameTable[7] = "WinRT.Triggers.Interactions";
            _typeNameTable[8] = "WinRT.Triggers.TriggerCollection";
            _typeNameTable[9] = "WinRT.Triggers.AttachableCollection`1<WinRT.Triggers.Trigger>";
            _typeNameTable[10] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[11] = "WinRT.Triggers.Trigger";
            _typeNameTable[12] = "WinRT.Triggers.AssociatableElement";
            _typeNameTable[13] = "WinRT.Triggers.AttachableCollection`1<WinRT.Triggers.TriggerAction>";
            _typeNameTable[14] = "WinRT.Triggers.TriggerAction";
            _typeNameTable[15] = "WinRT.Triggers.AttachableCollection`1<WinRT.Triggers.Condition>";
            _typeNameTable[16] = "WinRT.Triggers.Condition";
            _typeNameTable[17] = "WinRT.Triggers.ConditionOperator";
            _typeNameTable[18] = "System.Enum";
            _typeNameTable[19] = "System.ValueType";
            _typeNameTable[20] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[21] = "WinRT.Triggers.EventTrigger";
            _typeNameTable[22] = "WinRT.Triggers.EventHookingTrigger";
            _typeNameTable[23] = "String";
            _typeNameTable[24] = "WinRT.Triggers.InvokeCommandAction";
            _typeNameTable[25] = "System.Windows.Input.ICommand";
            _typeNameTable[26] = "Boolean";
            _typeNameTable[27] = "Callisto.Controls.LiveTile";
            _typeNameTable[28] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[29] = "Callisto.Controls.LiveTile.SlideDirection";
            _typeNameTable[30] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[31] = "FlickrPhotos.Views.FlickrAlbums";
            _typeNameTable[32] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[33] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[34] = "FlickrPhotos.Views.FlickrPhotos";
            _typeNameTable[35] = "FlickrPhotos.Views.WebViewExtensions";
            _typeNameTable[36] = "Windows.UI.Xaml.Controls.WebView";
            _typeNameTable[37] = "FlickrPhotos.FlickrAuthenticationView";
            _typeNameTable[38] = "FlickrPhotos.MainPage";
            _typeNameTable[39] = "FlickrPhotos.Views.PhotosView";
            _typeNameTable[40] = "FlickrPhotos.Common.ObservableDictionary";
            _typeNameTable[41] = "FlickrPhotos.Common.NavigationHelper";

            _typeTable = new global::System.Type[42];
            _typeTable[0] = typeof(global::FlickrPhotos.ViewModel.ViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::FlickrPhotos.ViewModel.FlickrAuthentication);
            _typeTable[3] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[4] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[5] = typeof(global::FlickrPhotos.ViewModel.FlickrPhotosViewModel);
            _typeTable[6] = typeof(global::FlickrPhotos.ViewModel.FlickrAlbumsViewModel);
            _typeTable[7] = typeof(global::WinRT.Triggers.Interactions);
            _typeTable[8] = typeof(global::WinRT.Triggers.TriggerCollection);
            _typeTable[9] = typeof(global::WinRT.Triggers.AttachableCollection<global::WinRT.Triggers.Trigger>);
            _typeTable[10] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[11] = typeof(global::WinRT.Triggers.Trigger);
            _typeTable[12] = typeof(global::WinRT.Triggers.AssociatableElement);
            _typeTable[13] = typeof(global::WinRT.Triggers.AttachableCollection<global::WinRT.Triggers.TriggerAction>);
            _typeTable[14] = typeof(global::WinRT.Triggers.TriggerAction);
            _typeTable[15] = typeof(global::WinRT.Triggers.AttachableCollection<global::WinRT.Triggers.Condition>);
            _typeTable[16] = typeof(global::WinRT.Triggers.Condition);
            _typeTable[17] = typeof(global::WinRT.Triggers.ConditionOperator);
            _typeTable[18] = typeof(global::System.Enum);
            _typeTable[19] = typeof(global::System.ValueType);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[21] = typeof(global::WinRT.Triggers.EventTrigger);
            _typeTable[22] = typeof(global::WinRT.Triggers.EventHookingTrigger);
            _typeTable[23] = typeof(global::System.String);
            _typeTable[24] = typeof(global::WinRT.Triggers.InvokeCommandAction);
            _typeTable[25] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[26] = typeof(global::System.Boolean);
            _typeTable[27] = typeof(global::Callisto.Controls.LiveTile);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[29] = typeof(global::Callisto.Controls.LiveTile.SlideDirection);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[31] = typeof(global::FlickrPhotos.Views.FlickrAlbums);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[34] = typeof(global::FlickrPhotos.Views.FlickrPhotos);
            _typeTable[35] = typeof(global::FlickrPhotos.Views.WebViewExtensions);
            _typeTable[36] = typeof(global::Windows.UI.Xaml.Controls.WebView);
            _typeTable[37] = typeof(global::FlickrPhotos.FlickrAuthenticationView);
            _typeTable[38] = typeof(global::FlickrPhotos.MainPage);
            _typeTable[39] = typeof(global::FlickrPhotos.Views.PhotosView);
            _typeTable[40] = typeof(global::FlickrPhotos.Common.ObservableDictionary);
            _typeTable[41] = typeof(global::FlickrPhotos.Common.NavigationHelper);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelLocator() { return new global::FlickrPhotos.ViewModel.ViewModelLocator(); }
        private object Activate_4_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_8_TriggerCollection() { return new global::WinRT.Triggers.TriggerCollection(); }
        private object Activate_9_AttachableCollection() { return new global::WinRT.Triggers.AttachableCollection<global::WinRT.Triggers.Trigger>(); }
        private object Activate_13_AttachableCollection() { return new global::WinRT.Triggers.AttachableCollection<global::WinRT.Triggers.TriggerAction>(); }
        private object Activate_15_AttachableCollection() { return new global::WinRT.Triggers.AttachableCollection<global::WinRT.Triggers.Condition>(); }
        private object Activate_16_Condition() { return new global::WinRT.Triggers.Condition(); }
        private object Activate_21_EventTrigger() { return new global::WinRT.Triggers.EventTrigger(); }
        private object Activate_24_InvokeCommandAction() { return new global::WinRT.Triggers.InvokeCommandAction(); }
        private object Activate_27_LiveTile() { return new global::Callisto.Controls.LiveTile(); }
        private object Activate_31_FlickrAlbums() { return new global::FlickrPhotos.Views.FlickrAlbums(); }
        private object Activate_34_FlickrPhotos() { return new global::FlickrPhotos.Views.FlickrPhotos(); }
        private object Activate_37_FlickrAuthenticationView() { return new global::FlickrPhotos.FlickrAuthenticationView(); }
        private object Activate_38_MainPage() { return new global::FlickrPhotos.MainPage(); }
        private object Activate_39_PhotosView() { return new global::FlickrPhotos.Views.PhotosView(); }
        private object Activate_40_ObservableDictionary() { return new global::FlickrPhotos.Common.ObservableDictionary(); }
        private void VectorAdd_8_TriggerCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinRT.Triggers.Trigger>)instance;
            var newItem = (global::WinRT.Triggers.Trigger)item;
            collection.Add(newItem);
        }
        private void VectorAdd_9_AttachableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinRT.Triggers.Trigger>)instance;
            var newItem = (global::WinRT.Triggers.Trigger)item;
            collection.Add(newItem);
        }
        private void VectorAdd_13_AttachableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinRT.Triggers.TriggerAction>)instance;
            var newItem = (global::WinRT.Triggers.TriggerAction)item;
            collection.Add(newItem);
        }
        private void VectorAdd_15_AttachableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinRT.Triggers.Condition>)instance;
            var newItem = (global::WinRT.Triggers.Condition)item;
            collection.Add(newItem);
        }
        private void MapAdd_40_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  FlickrPhotos.ViewModel.ViewModelLocator
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("FlickrAuthenticationViewModel");
                userType.AddMemberName("FlickrPhotosViewModel");
                userType.AddMemberName("FlickrAlbumsViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  FlickrPhotos.ViewModel.FlickrAuthentication
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case 4:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_ObservableObject;
                xamlType = userType;
                break;

            case 5:   //  FlickrPhotos.ViewModel.FlickrPhotosViewModel
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  FlickrPhotos.ViewModel.FlickrAlbumsViewModel
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  WinRT.Triggers.Interactions
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Triggers");
                xamlType = userType;
                break;

            case 8:   //  WinRT.Triggers.TriggerCollection
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinRT.Triggers.AttachableCollection`1<WinRT.Triggers.Trigger>"));
                userType.CollectionAdd = VectorAdd_8_TriggerCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  WinRT.Triggers.AttachableCollection`1<WinRT.Triggers.Trigger>
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_9_AttachableCollection;
                userType.CollectionAdd = VectorAdd_9_AttachableCollection;
                xamlType = userType;
                break;

            case 10:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  WinRT.Triggers.Trigger
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinRT.Triggers.AssociatableElement"));
                userType.SetContentPropertyName("WinRT.Triggers.Trigger.TriggerActions");
                userType.AddMemberName("TriggerActions");
                xamlType = userType;
                break;

            case 12:   //  WinRT.Triggers.AssociatableElement
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 13:   //  WinRT.Triggers.AttachableCollection`1<WinRT.Triggers.TriggerAction>
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.CollectionAdd = VectorAdd_13_AttachableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  WinRT.Triggers.TriggerAction
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinRT.Triggers.AssociatableElement"));
                userType.SetContentPropertyName("WinRT.Triggers.TriggerAction.Conditions");
                userType.AddMemberName("Conditions");
                xamlType = userType;
                break;

            case 15:   //  WinRT.Triggers.AttachableCollection`1<WinRT.Triggers.Condition>
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.CollectionAdd = VectorAdd_15_AttachableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  WinRT.Triggers.Condition
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinRT.Triggers.AssociatableElement"));
                userType.Activator = Activate_16_Condition;
                userType.AddMemberName("Operator");
                userType.AddMemberName("LeftOperand");
                userType.AddMemberName("RightOperand");
                xamlType = userType;
                break;

            case 17:   //  WinRT.Triggers.ConditionOperator
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Equals", global::WinRT.Triggers.ConditionOperator.Equals);
                userType.AddEnumValue("NotEquals", global::WinRT.Triggers.ConditionOperator.NotEquals);
                userType.AddEnumValue("GreaterThan", global::WinRT.Triggers.ConditionOperator.GreaterThan);
                userType.AddEnumValue("LessThan", global::WinRT.Triggers.ConditionOperator.LessThan);
                userType.AddEnumValue("GreaterThanOrEqual", global::WinRT.Triggers.ConditionOperator.GreaterThanOrEqual);
                userType.AddEnumValue("LessThanOrEqual", global::WinRT.Triggers.ConditionOperator.LessThanOrEqual);
                xamlType = userType;
                break;

            case 18:   //  System.Enum
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 19:   //  System.ValueType
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 20:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  WinRT.Triggers.EventTrigger
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinRT.Triggers.EventHookingTrigger"));
                userType.Activator = Activate_21_EventTrigger;
                userType.SetContentPropertyName("WinRT.Triggers.Trigger.TriggerActions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                xamlType = userType;
                break;

            case 22:   //  WinRT.Triggers.EventHookingTrigger
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinRT.Triggers.Trigger"));
                userType.SetContentPropertyName("WinRT.Triggers.Trigger.TriggerActions");
                xamlType = userType;
                break;

            case 23:   //  String
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  WinRT.Triggers.InvokeCommandAction
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinRT.Triggers.TriggerAction"));
                userType.Activator = Activate_24_InvokeCommandAction;
                userType.SetContentPropertyName("WinRT.Triggers.TriggerAction.Conditions");
                userType.AddMemberName("Command");
                userType.AddMemberName("PassEventArgsToCommand");
                userType.AddMemberName("CommandParameter");
                xamlType = userType;
                break;

            case 25:   //  System.Windows.Input.ICommand
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  Boolean
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Callisto.Controls.LiveTile
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_27_LiveTile;
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("Direction");
                userType.AddMemberName("ItemTemplate");
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Callisto.Controls.LiveTile.SlideDirection
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Up", global::Callisto.Controls.LiveTile.SlideDirection.Up);
                userType.AddEnumValue("Left", global::Callisto.Controls.LiveTile.SlideDirection.Left);
                xamlType = userType;
                break;

            case 30:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  FlickrPhotos.Views.FlickrAlbums
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_FlickrAlbums;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  FlickrPhotos.Views.FlickrPhotos
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_FlickrPhotos;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  FlickrPhotos.Views.WebViewExtensions
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("UriSource");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Xaml.Controls.WebView
                xamlType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  FlickrPhotos.FlickrAuthenticationView
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_37_FlickrAuthenticationView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  FlickrPhotos.MainPage
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  FlickrPhotos.Views.PhotosView
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_39_PhotosView;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  FlickrPhotos.Common.ObservableDictionary
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_40_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  FlickrPhotos.Common.NavigationHelper
                userType = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Callisto.Callisto_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ViewModelLocator_FlickrAuthenticationViewModel(object instance)
        {
            var that = (global::FlickrPhotos.ViewModel.ViewModelLocator)instance;
            return that.FlickrAuthenticationViewModel;
        }
        private object get_1_ViewModelLocator_FlickrPhotosViewModel(object instance)
        {
            var that = (global::FlickrPhotos.ViewModel.ViewModelLocator)instance;
            return that.FlickrPhotosViewModel;
        }
        private object get_2_ViewModelLocator_FlickrAlbumsViewModel(object instance)
        {
            var that = (global::FlickrPhotos.ViewModel.ViewModelLocator)instance;
            return that.FlickrAlbumsViewModel;
        }
        private object get_3_Interactions_Triggers(object instance)
        {
            return global::WinRT.Triggers.Interactions.GetTriggers((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_3_Interactions_Triggers(object instance, object Value)
        {
            global::WinRT.Triggers.Interactions.SetTriggers((global::Windows.UI.Xaml.DependencyObject)instance, (global::WinRT.Triggers.TriggerCollection)Value);
        }
        private object get_4_Trigger_TriggerActions(object instance)
        {
            var that = (global::WinRT.Triggers.Trigger)instance;
            return that.TriggerActions;
        }
        private void set_4_Trigger_TriggerActions(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.Trigger)instance;
            that.TriggerActions = (global::WinRT.Triggers.AttachableCollection<global::WinRT.Triggers.TriggerAction>)Value;
        }
        private object get_5_TriggerAction_Conditions(object instance)
        {
            var that = (global::WinRT.Triggers.TriggerAction)instance;
            return that.Conditions;
        }
        private void set_5_TriggerAction_Conditions(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.TriggerAction)instance;
            that.Conditions = (global::WinRT.Triggers.AttachableCollection<global::WinRT.Triggers.Condition>)Value;
        }
        private object get_6_Condition_Operator(object instance)
        {
            var that = (global::WinRT.Triggers.Condition)instance;
            return that.Operator;
        }
        private void set_6_Condition_Operator(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.Condition)instance;
            that.Operator = (global::WinRT.Triggers.ConditionOperator)Value;
        }
        private object get_7_Condition_LeftOperand(object instance)
        {
            var that = (global::WinRT.Triggers.Condition)instance;
            return that.LeftOperand;
        }
        private void set_7_Condition_LeftOperand(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.Condition)instance;
            that.LeftOperand = (global::System.Object)Value;
        }
        private object get_8_Condition_RightOperand(object instance)
        {
            var that = (global::WinRT.Triggers.Condition)instance;
            return that.RightOperand;
        }
        private void set_8_Condition_RightOperand(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.Condition)instance;
            that.RightOperand = (global::System.Object)Value;
        }
        private object get_9_AssociatableElement_AssociatedObject(object instance)
        {
            var that = (global::WinRT.Triggers.AssociatableElement)instance;
            return that.AssociatedObject;
        }
        private object get_10_EventTrigger_EventName(object instance)
        {
            var that = (global::WinRT.Triggers.EventTrigger)instance;
            return that.EventName;
        }
        private void set_10_EventTrigger_EventName(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.EventTrigger)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_11_EventTrigger_SourceObject(object instance)
        {
            var that = (global::WinRT.Triggers.EventTrigger)instance;
            return that.SourceObject;
        }
        private void set_11_EventTrigger_SourceObject(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.EventTrigger)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_12_InvokeCommandAction_Command(object instance)
        {
            var that = (global::WinRT.Triggers.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_12_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_13_InvokeCommandAction_PassEventArgsToCommand(object instance)
        {
            var that = (global::WinRT.Triggers.InvokeCommandAction)instance;
            return that.PassEventArgsToCommand;
        }
        private void set_13_InvokeCommandAction_PassEventArgsToCommand(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.InvokeCommandAction)instance;
            that.PassEventArgsToCommand = (global::System.Boolean)Value;
        }
        private object get_14_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::WinRT.Triggers.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_14_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::WinRT.Triggers.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_15_LiveTile_ItemsSource(object instance)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            return that.ItemsSource;
        }
        private void set_15_LiveTile_ItemsSource(object instance, object Value)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_16_LiveTile_Direction(object instance)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            return that.Direction;
        }
        private void set_16_LiveTile_Direction(object instance, object Value)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            that.Direction = (global::Callisto.Controls.LiveTile.SlideDirection)Value;
        }
        private object get_17_LiveTile_ItemTemplate(object instance)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            return that.ItemTemplate;
        }
        private void set_17_LiveTile_ItemTemplate(object instance, object Value)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_18_WebViewExtensions_UriSource(object instance)
        {
            return global::FlickrPhotos.Views.WebViewExtensions.GetUriSource((global::Windows.UI.Xaml.Controls.WebView)instance);
        }
        private void set_18_WebViewExtensions_UriSource(object instance, object Value)
        {
            global::FlickrPhotos.Views.WebViewExtensions.SetUriSource((global::Windows.UI.Xaml.Controls.WebView)instance, (global::System.String)Value);
        }
        private object get_19_PhotosView_DefaultViewModel(object instance)
        {
            var that = (global::FlickrPhotos.Views.PhotosView)instance;
            return that.DefaultViewModel;
        }
        private object get_20_PhotosView_NavigationHelper(object instance)
        {
            var that = (global::FlickrPhotos.Views.PhotosView)instance;
            return that.NavigationHelper;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember xamlMember = null;
            global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "FlickrPhotos.ViewModel.ViewModelLocator.FlickrAuthenticationViewModel":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FlickrPhotos.ViewModel.ViewModelLocator");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "FlickrAuthenticationViewModel", "FlickrPhotos.ViewModel.FlickrAuthentication");
                xamlMember.Getter = get_0_ViewModelLocator_FlickrAuthenticationViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "FlickrPhotos.ViewModel.ViewModelLocator.FlickrPhotosViewModel":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FlickrPhotos.ViewModel.ViewModelLocator");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "FlickrPhotosViewModel", "FlickrPhotos.ViewModel.FlickrPhotosViewModel");
                xamlMember.Getter = get_1_ViewModelLocator_FlickrPhotosViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "FlickrPhotos.ViewModel.ViewModelLocator.FlickrAlbumsViewModel":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FlickrPhotos.ViewModel.ViewModelLocator");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "FlickrAlbumsViewModel", "FlickrPhotos.ViewModel.FlickrAlbumsViewModel");
                xamlMember.Getter = get_2_ViewModelLocator_FlickrAlbumsViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRT.Triggers.Interactions.Triggers":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.Interactions");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "Triggers", "WinRT.Triggers.TriggerCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_3_Interactions_Triggers;
                xamlMember.Setter = set_3_Interactions_Triggers;
                break;
            case "WinRT.Triggers.Trigger.TriggerActions":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.Trigger");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "TriggerActions", "WinRT.Triggers.AttachableCollection`1<WinRT.Triggers.TriggerAction>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_Trigger_TriggerActions;
                xamlMember.Setter = set_4_Trigger_TriggerActions;
                break;
            case "WinRT.Triggers.TriggerAction.Conditions":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.TriggerAction");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "Conditions", "WinRT.Triggers.AttachableCollection`1<WinRT.Triggers.Condition>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_TriggerAction_Conditions;
                xamlMember.Setter = set_5_TriggerAction_Conditions;
                break;
            case "WinRT.Triggers.Condition.Operator":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.Condition");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "Operator", "WinRT.Triggers.ConditionOperator");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_Condition_Operator;
                xamlMember.Setter = set_6_Condition_Operator;
                break;
            case "WinRT.Triggers.Condition.LeftOperand":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.Condition");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "LeftOperand", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_Condition_LeftOperand;
                xamlMember.Setter = set_7_Condition_LeftOperand;
                break;
            case "WinRT.Triggers.Condition.RightOperand":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.Condition");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "RightOperand", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_Condition_RightOperand;
                xamlMember.Setter = set_8_Condition_RightOperand;
                break;
            case "WinRT.Triggers.AssociatableElement.AssociatedObject":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.AssociatableElement");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_9_AssociatableElement_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRT.Triggers.EventTrigger.EventName":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.EventTrigger");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_EventTrigger_EventName;
                xamlMember.Setter = set_10_EventTrigger_EventName;
                break;
            case "WinRT.Triggers.EventTrigger.SourceObject":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.EventTrigger");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_EventTrigger_SourceObject;
                xamlMember.Setter = set_11_EventTrigger_SourceObject;
                break;
            case "WinRT.Triggers.InvokeCommandAction.Command":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.InvokeCommandAction");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_InvokeCommandAction_Command;
                xamlMember.Setter = set_12_InvokeCommandAction_Command;
                break;
            case "WinRT.Triggers.InvokeCommandAction.PassEventArgsToCommand":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.InvokeCommandAction");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "PassEventArgsToCommand", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_InvokeCommandAction_PassEventArgsToCommand;
                xamlMember.Setter = set_13_InvokeCommandAction_PassEventArgsToCommand;
                break;
            case "WinRT.Triggers.InvokeCommandAction.CommandParameter":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRT.Triggers.InvokeCommandAction");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_14_InvokeCommandAction_CommandParameter;
                break;
            case "Callisto.Controls.LiveTile.ItemsSource":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.LiveTile");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_LiveTile_ItemsSource;
                xamlMember.Setter = set_15_LiveTile_ItemsSource;
                break;
            case "Callisto.Controls.LiveTile.Direction":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.LiveTile");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "Direction", "Callisto.Controls.LiveTile.SlideDirection");
                xamlMember.Getter = get_16_LiveTile_Direction;
                xamlMember.Setter = set_16_LiveTile_Direction;
                break;
            case "Callisto.Controls.LiveTile.ItemTemplate":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.LiveTile");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_LiveTile_ItemTemplate;
                xamlMember.Setter = set_17_LiveTile_ItemTemplate;
                break;
            case "FlickrPhotos.Views.WebViewExtensions.UriSource":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FlickrPhotos.Views.WebViewExtensions");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "UriSource", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.Controls.WebView");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_18_WebViewExtensions_UriSource;
                xamlMember.Setter = set_18_WebViewExtensions_UriSource;
                break;
            case "FlickrPhotos.Views.PhotosView.DefaultViewModel":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FlickrPhotos.Views.PhotosView");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "FlickrPhotos.Common.ObservableDictionary");
                xamlMember.Getter = get_19_PhotosView_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "FlickrPhotos.Views.PhotosView.NavigationHelper":
                userType = (global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("FlickrPhotos.Views.PhotosView");
                xamlMember = new global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "FlickrPhotos.Common.NavigationHelper");
                xamlMember.Getter = get_20_PhotosView_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlSystemBaseType
    {
        global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::FlickrPhotos.FlickrPhotos_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


